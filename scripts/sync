#!/bin/bash

TMPDIR=/tmp
RSYNC_OPTS="-r --exclude=\".git/\" $RSYNC_OPTS"

red='\e[0;31m'
RED='\e[1;31m'
green='\e[0;32m'
GREEN='\e[1;32m'
yellow='\e[0;33m'
YELLOW='\e[1;33m'
NC='\e[0m'


output() {
	local color=$1
	shift
	echo -e " $color*$NC $@" >&2
}

error() {
	output $RED "$@"
}

warn() {
	output $YELLOW "$@"
}

info() {
	output $GREEN "$@"
}


debug() {
	if $DEBUG;then
		info $@
	fi
}

die() {
	error "$@"
	exit 1
}


git_cache_prefix() {
	echo "$TMPDIR/$(basename $0)_git_cache_"
}


setup_git_cache_dir() {
	if [ $(ls -1d $(git_cache_prefix)* 2>/dev/null | wc -l) -eq 0 ];then
		debug "there is not yet a git cache dir"
		local fname="$(git_cache_prefix)$$"
		debug 'setting up git cache dir:' $fname
		mkdir $fname
		echo $fname
	else
		debug "there is already a git cache dir"
		ls -1d $(git_cache_prefix)* 2>/dev/null | head -1
	fi
}


setup_git_cache() {
	local cache_dir=$(setup_git_cache_dir)
	debug entering $cache_dir
	pushd $cache_dir > /dev/null
	if [ -d $PROJ ];then # we could pull in git-sh-setup to know if this is the actual $GIT_DIR, but that seems overkill at the moment
		debug oh, we already have a project at $PROJ
		# we are set
		cd $PROJ
	else
		debug no proj yet, lets go
		git clone $GIT_URL >&2
		cd $PROJ
		git submodule init
		git submodule update
	fi
	debug "switching to $branch"
	git checkout $branch >&2
	debug "updating $branch from origin"
	git pull >&2 # origin $branch >&2
	git submodule update
	echo $cache_dir/$PROJ
	popd > /dev/null
}


parent=$(setup_git_cache)

# TODO: ensure that the $PROJ_models directory exists

TO_COPY=(
	"$parent/config/database.yml config/database_parent.yml"
	"--delete $parent/app/models/* app/parent_models/"
	"$parent/vendor/plugins/* vendor/plugins"
	"$parent"
	"$(for f in $JAVASCRIPTS;do echo $parent/public/javascripts/$f.js;done) public/javascripts"
	"$(for f in $FROM_LIB;do echo $parent/lib/$f.rb;done) lib"
	"$(for f in $STYLESHEETS;do echo $parent/public/stylesheets/$f.css;done) public/stylesheets"
)

for opts in "${TO_COPY[@]}";do
	echo $RSYNC_OPTS $opts
#	rsync $RSYNC_OPTS $opts
done


